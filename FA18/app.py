from flask import Flask, flash, redirect, render_template, request, session, abort
import all
import to_json
import json

app = Flask(__name__)


# default starting page
@app.route("/")
def init():
    return render_template('layout_main.html')


# visualization page
@app.route("/network/", methods=['POST'])
def generate():
    pre_graph = request.form.get('graph')
    topic_name = request.form.get('topicName')
    direction = request.form.get('direction')

    if pre_graph == 'linalg':
        network_json = { "nodes": [{ "name": "Outline of physical science", "cluster": 3, "inlinks": 1 }, { "name": "Metric (mathematics)", "cluster": 3, "inlinks": 1 }, { "name": "Soliton", "cluster": 6, "inlinks": 1 }, { "name": "Topology", "cluster": 0, "inlinks": 1 }, { "name": "Higher-order function", "cluster": 7, "inlinks": 1 }, { "name": "Orthonormal basis", "cluster": 4, "inlinks": 1 }, { "name": "Row and column vectors", "cluster": 3, "inlinks": 1 }, { "name": "Dynamical system", "cluster": 2, "inlinks": 1 }, { "name": "Science", "cluster": 3, "inlinks": 1 }, { "name": "Linearization", "cluster": 1, "inlinks": 2 }, { "name": "Fourier series", "cluster": 6, "inlinks": 1 }, { "name": "Function composition", "cluster": 2, "inlinks": 1 }, { "name": "Nonlinear system", "cluster": 1, "inlinks": 3 }, { "name": "Equation", "cluster": 1, "inlinks": 4 }, { "name": "Functional analysis", "cluster": 8, "inlinks": 5 }, { "name": "Origin (mathematics)", "cluster": 9, "inlinks": 1 }, { "name": "Taylor series", "cluster": 8, "inlinks": 1 }, { "name": "Three-dimensional space", "cluster": 7, "inlinks": 1 }, { "name": "Geodesic", "cluster": 4, "inlinks": 1 }, { "name": "Linear map", "cluster": 3, "inlinks": 1 }, { "name": "Function space", "cluster": 1, "inlinks": 4 }, { "name": "Partial differential equation", "cluster": 4, "inlinks": 2 }, { "name": "Inner product space", "cluster": 0, "inlinks": 1 }, { "name": "Integral equation", "cluster": 1, "inlinks": 1 }, { "name": "Mathematics", "cluster": 3, "inlinks": 2 }, { "name": "Dimension (vector space)", "cluster": 8, "inlinks": 2 }, { "name": "Algebraic equation", "cluster": 1, "inlinks": 2 }, { "name": "Calculus of variations", "cluster": 6, "inlinks": 4 }, { "name": "Poland", "cluster": 2, "inlinks": 1 }, { "name": "Scalar (mathematics)", "cluster": 6, "inlinks": 1 }, { "name": "Euclidean vector", "cluster": 2, "inlinks": 2 }, { "name": "Chaos theory", "cluster": 9, "inlinks": 1 }, { "name": "Vector space", "cluster": 0, "inlinks": 2 }, { "name": "Transformation matrix", "cluster": 0, "inlinks": 2 }, { "name": "Integral", "cluster": 9, "inlinks": 1 }, { "name": "Space (mathematics)", "cluster": 6, "inlinks": 3 }, { "name": "Hilbert space", "cluster": 0, "inlinks": 3 }, { "name": "Finite element method", "cluster": 7, "inlinks": 4 }, { "name": "Map (mathematics)", "cluster": 8, "inlinks": 1 }, { "name": "Norm (mathematics)", "cluster": 4, "inlinks": 6 }, { "name": "Eigenvalues and eigenvectors", "cluster": 0, "inlinks": 2 }, { "name": "Linear algebra", "cluster": 5, "inlinks": 0 }, { "name": "Analytic geometry", "cluster": 4, "inlinks": 1 }, { "name": "Morphism", "cluster": 0, "inlinks": 1 }, { "name": "Functional (mathematics)", "cluster": 6, "inlinks": 1 }, { "name": "Giuseppe Peano", "cluster": 2, "inlinks": 1 }, { "name": "Mathematical analysis", "cluster": 5, "inlinks": 6 }, { "name": "Banach space", "cluster": 1, "inlinks": 2 }, { "name": "Stefan Banach", "cluster": 0, "inlinks": 1 }], "edges": [{ "id": 0, "source": 41, "target": 39, "iters": 2 }, { "id": 1, "source": 39, "target": 20, "iters": 2 }, { "id": 2, "source": 20, "target": 25, "iters": 1 }, { "id": 3, "source": 25, "target": 35, "iters": 1 }, { "id": 4, "source": 35, "target": 14, "iters": 2 }, { "id": 5, "source": 14, "target": 5, "iters": 1 }, { "id": 6, "source": 5, "target": 47, "iters": 1 }, { "id": 7, "source": 47, "target": 43, "iters": 1 }, { "id": 8, "source": 43, "target": 20, "iters": 1 }, { "id": 9, "source": 41, "target": 9, "iters": 2 }, { "id": 10, "source": 9, "target": 12, "iters": 1 }, { "id": 11, "source": 12, "target": 40, "iters": 1 }, { "id": 12, "source": 40, "target": 30, "iters": 1 }, { "id": 13, "source": 30, "target": 39, "iters": 1 }, { "id": 14, "source": 39, "target": 47, "iters": 1 }, { "id": 15, "source": 47, "target": 35, "iters": 1 }, { "id": 16, "source": 14, "target": 3, "iters": 1 }, { "id": 17, "source": 41, "target": 14, "iters": 1 }, { "id": 18, "source": 14, "target": 36, "iters": 1 }, { "id": 19, "source": 36, "target": 46, "iters": 2 }, { "id": 20, "source": 46, "target": 46, "iters": 1 }, { "id": 21, "source": 46, "target": 34, "iters": 1 }, { "id": 22, "source": 34, "target": 46, "iters": 1 }, { "id": 23, "source": 46, "target": 10, "iters": 1 }, { "id": 24, "source": 10, "target": 46, "iters": 1 }, { "id": 25, "source": 46, "target": 37, "iters": 1 }, { "id": 26, "source": 41, "target": 22, "iters": 1 }, { "id": 27, "source": 22, "target": 35, "iters": 1 }, { "id": 28, "source": 35, "target": 39, "iters": 1 }, { "id": 29, "source": 39, "target": 14, "iters": 1 }, { "id": 30, "source": 14, "target": 44, "iters": 1 }, { "id": 31, "source": 44, "target": 13, "iters": 1 }, { "id": 32, "source": 13, "target": 37, "iters": 2 }, { "id": 33, "source": 37, "target": 37, "iters": 1 }, { "id": 34, "source": 37, "target": 21, "iters": 2 }, { "id": 35, "source": 41, "target": 25, "iters": 1 }, { "id": 36, "source": 25, "target": 30, "iters": 1 }, { "id": 37, "source": 30, "target": 6, "iters": 1 }, { "id": 38, "source": 6, "target": 33, "iters": 1 }, { "id": 39, "source": 33, "target": 33, "iters": 1 }, { "id": 40, "source": 33, "target": 40, "iters": 1 }, { "id": 41, "source": 40, "target": 12, "iters": 1 }, { "id": 42, "source": 12, "target": 2, "iters": 1 }, { "id": 43, "source": 2, "target": 13, "iters": 1 }, { "id": 44, "source": 41, "target": 20, "iters": 1 }, { "id": 45, "source": 20, "target": 39, "iters": 1 }, { "id": 46, "source": 39, "target": 36, "iters": 1 }, { "id": 47, "source": 36, "target": 27, "iters": 1 }, { "id": 48, "source": 27, "target": 13, "iters": 1 }, { "id": 49, "source": 21, "target": 26, "iters": 1 }, { "id": 50, "source": 26, "target": 13, "iters": 1 }, { "id": 51, "source": 41, "target": 17, "iters": 1 }, { "id": 52, "source": 17, "target": 15, "iters": 1 }, { "id": 53, "source": 15, "target": 42, "iters": 1 }, { "id": 54, "source": 42, "target": 18, "iters": 1 }, { "id": 55, "source": 18, "target": 27, "iters": 1 }, { "id": 56, "source": 27, "target": 11, "iters": 1 }, { "id": 57, "source": 11, "target": 27, "iters": 1 }, { "id": 58, "source": 27, "target": 46, "iters": 1 }, { "id": 59, "source": 46, "target": 16, "iters": 1 }, { "id": 60, "source": 9, "target": 31, "iters": 1 }, { "id": 61, "source": 31, "target": 24, "iters": 1 }, { "id": 62, "source": 24, "target": 48, "iters": 1 }, { "id": 63, "source": 48, "target": 45, "iters": 1 }, { "id": 64, "source": 45, "target": 28, "iters": 1 }, { "id": 65, "source": 28, "target": 8, "iters": 1 }, { "id": 66, "source": 8, "target": 0, "iters": 1 }, { "id": 67, "source": 0, "target": 24, "iters": 1 }, { "id": 68, "source": 41, "target": 36, "iters": 1 }, { "id": 69, "source": 46, "target": 23, "iters": 1 }, { "id": 70, "source": 23, "target": 26, "iters": 1 }, { "id": 71, "source": 26, "target": 12, "iters": 1 }, { "id": 72, "source": 12, "target": 7, "iters": 1 }, { "id": 73, "source": 7, "target": 32, "iters": 1 }, { "id": 74, "source": 32, "target": 29, "iters": 1 }, { "id": 75, "source": 29, "target": 39, "iters": 1 }, { "id": 76, "source": 20, "target": 1, "iters": 1 }, { "id": 77, "source": 1, "target": 32, "iters": 1 }, { "id": 78, "source": 32, "target": 14, "iters": 1 }, { "id": 79, "source": 14, "target": 19, "iters": 1 }, { "id": 80, "source": 19, "target": 38, "iters": 1 }, { "id": 81, "source": 38, "target": 4, "iters": 1 }, { "id": 82, "source": 4, "target": 27, "iters": 1 }] }
    elif pre_graph == 'hevea':
        network_json = ""
    else:
        paths = all.all('https://en.wikipedia.org/wiki/{}'.format(topic_name.replace(' ', '_')))
        network_json = to_json.store_paths(paths)

    return render_template('layout_network.html', **locals())

if __name__ == "__main__":
    app.run()
